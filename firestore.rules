rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Schemes collection rules
    match /schemes/{scheme} {
      allow read: if true;  // Anyone can read schemes
      allow write: if isAdmin();  // Only admins can write
    }
    
    // Admins collection rules
    match /admins/{userId} {
      allow read, write: if isAdmin();
    }
    
    // Allow read access to all documents (you might want to restrict this)
    match /{document=**} {
      allow read: if true;
    }

    // Allow write access to authenticated users and their subcollections
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
      
      // Updated rules for fields collection and its subcollections
      match /fields/{fieldId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        
        // Add specific rules for predictions subcollection
        match /predictions/{predictionId} {
          allow read, write: if request.auth != null && request.auth.uid == userId;
        }
      }
    }

    // Allow write access to user-specific collections
    match /{userType}/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
      
      // Add this rule for subcollections in user-specific collections
      match /{collection}/{docId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
  }
} 